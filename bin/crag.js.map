{"version":3,"sources":["../src/config.ts","../src/schema.ts","../src/logger.ts","../src/commands/generate/api.ts","../src/commands/generate/index.ts","../src/cli.ts"],"sourcesContent":["import { loadConfig } from \"c12\";\nimport type { ConfigOption } from \"~/schema\";\n\nexport const { config, configFile, layers } = await loadConfig<ConfigOption>({\n  name: \"crag\"\n});\n","import { Schema } from \"effect\"\n\nexport type ConfigOption = Schema.Schema.Type<typeof configOptions>;\nexport type InputEntry = Schema.Schema.Type<typeof inputEntry>;\n\nexport const StringFromPath = Schema.transform(\n  Schema.NonEmptyTrimmedString,\n  Schema.NonEmptyTrimmedString, {\n  strict: true,\n  encode: (v) => {\n    function validatePath(path: string) {\n      console.log(\">>> \", path);\n\n      if (path.startsWith('/')) {\n        throw new Error(`Please use a relative path: Path(${path})`);\n      }\n\n      if (path.startsWith('./')) return path;\n      if (path.startsWith('https://') || path.startsWith('http://')) return path;\n\n      // Ensure the file exists\n      throw new Error(`Invalid Input Path(${path}) not found`);\n    }\n\n    return validatePath(v);\n  },\n  decode: (v) => v\n}).pipe(\n  Schema.annotations({\n    description: \"A string representing a path to a file or URL\",\n    examples: [\"./path/to/file\", \"https://example.com/file\"]\n  })\n)\n\nexport const input = Schema.Struct({\n  path: StringFromPath,\n  type: Schema.Literal(\"postman\", \"openapi\").pipe(\n    Schema.annotations({\n      description: \"The source input type\",\n      examples: [\"postman\", \"openapi\"]\n    })\n  )\n});\n\nexport const inputEntry = Schema.Union(\n  input,\n  StringFromPath\n)\n\nexport const configOptions = Schema.Struct({\n  input: Schema.typeSchema(inputEntry).pipe(Schema.NonEmptyArray),\n  output: Schema.NonEmptyString,\n  verbose: Schema.Boolean.pipe(\n    Schema.annotations({\n      description: \"Enable verbose logging\",\n      examples: [true, false]\n    })\n  )\n});\n","import { createConsola, LogLevels } from 'consola';\nimport { config } from './config';\nimport { isDevelopment } from 'std-env';\n\nexport const rootLogger = createConsola({\n  level: isDevelopment ? LogLevels.debug : config.verbose ? LogLevels.trace : LogLevels.info,\n});\n","import { defineCommand } from \"citty\";\nimport { Match, pipe, Schema } from \"effect\";\nimport { createClient } from '@hey-api/openapi-ts';\n// @ts-expect-error\nimport postmanToOpenApi from 'postman-to-openapi';\nimport { config, configFile } from \"~/config\";\nimport { type InputEntry, input } from \"~/schema\";\nimport { rootLogger } from \"~/logger\";\n\nexport default defineCommand({\n  meta: {\n    name: \"api\",\n    description: \"Generate fetchers and hooks from Postman collection\"\n  },\n  args: {\n    path: {\n      type: 'string',\n      description: 'API Spec location',\n      required: false\n    },\n    destination: {\n      type: 'string',\n      description: 'OpenAPI location',\n      required: false\n    }\n  },\n  async setup({ args }) {\n    rootLogger.debug(\"$$\", config);\n    const inputs = config.input;\n\n    for (const input_entry of inputs) {\n      const input_parsed = InputImpl.normalize(input_entry);\n      const output_dir = args.destination ?? config.output;\n\n      try {\n        const p_input = input_parsed.type === \"postman\" ?\n          await postmanToOpenAPISpecs(input_parsed.path)\n          : input_parsed.path\n\n        await createClient({\n          input: p_input,\n          output: output_dir,\n          configFile: configFile\n        });\n\n        rootLogger.success(\"ðŸŽ‰ Generated API client\");\n      } catch (err) {\n        console.log(err)\n      }\n    }\n  }\n})\n\nasync function postmanToOpenAPISpecs(path_to_collection: string) {\n  try {\n    return await postmanToOpenApi(path_to_collection, null, { defaultTag: 'General' });\n  } catch (error) {\n    throw new Error(\"Error generating OpenAPI spec from Postman Collection\", { cause: error });\n  }\n}\n\nconst InputImpl = {\n  normalize(input_entry: InputEntry) {\n    const encode = Schema.encodeSync(input);\n\n    return pipe(\n      Match.value(input_entry),\n      Match.when(Match.string, (path) => {\n        return encode({\n          type: \"openapi\",\n          path: path\n        })\n      }),\n      Match.orElse((e) => encode(e)),\n    )\n  },\n}\n","import { defineCommand } from \"citty\";\n\nexport default defineCommand({\n    meta: {\n        name: 'generate',\n        description: 'Generate command'\n    },\n    subCommands: {\n        api: () => import(\"./api\").then(m => m.default),\n    }\n})","import { defineCommand, runMain } from 'citty'\n\nconst main = defineCommand({\n  meta: {\n    name: 'crag',\n    version: '1.0.0',\n    description: 'Generate API fetchers and React hooks from Postman collections'\n  },\n  subCommands: {\n    generate: () => import(\"./commands/generate\").then(m => m.default),\n  },\n})\n\nrunMain(main)\n"],"mappings":"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","names":["Schema","defineCommand","defineCommand"]}