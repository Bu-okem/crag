name: Build, Test, and Publish Crag to NPM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Run linting (if available)
        run: pnpm lint --if-present

      - name: Run tests
        run: pnpm test --if-present

      - name: Build project
        run: pnpm build

      - name: Test CLI functionality
        run: |
          # Test that the built CLI can run
          node dist/cli.js --help || echo "CLI help test completed"

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Get package info
        id: package-info
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists on NPM
        id: version-check
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.version }}"

          # Check if this version already exists on NPM
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version &>/dev/null; then
            echo "Version $PACKAGE_VERSION of $PACKAGE_NAME already exists on NPM"
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION of $PACKAGE_NAME does not exist on NPM"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip publishing (version exists)
        if: steps.version-check.outputs.should_publish == 'false'
        run: |
          echo "⚠️ Skipping publish: Version ${{ steps.package-info.outputs.version }} already exists on NPM"
          echo "To publish a new version:"
          echo "1. Update the version in package.json"
          echo "2. Commit and push the changes"
          echo "3. Or run: pnpm version patch && git push --follow-tags"

      - name: Test CLI before publishing
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          echo "🧪 Testing CLI functionality before publishing..."
          node dist/cli.js --version || echo "Version check completed"
          node dist/cli.js --help || echo "Help check completed"

      - name: Publish to NPM
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          echo "🚀 Publishing ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }} to NPM..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-info.outputs.version }}
          release_name: Crag v${{ steps.package-info.outputs.version }}
          body: |
            ## 🎉 Crag v${{ steps.package-info.outputs.version }}

            A CLI tool to generate TanStack Query hooks from API specifications.

            ### Installation
            ```bash
            npm install -g crag@${{ steps.package-info.outputs.version }}
            ```

            ### Usage
            ```bash
            # Generate from OpenAPI spec
            crag generate api --path ./api-spec.yaml

            # Generate from Postman collection
            crag generate api --path ./collection.json
            ```

            ### Links
            - 📦 [NPM Package](https://www.npmjs.com/package/crag)
            - 📖 [Documentation](https://github.com/Bu-okem/crag#readme)
          draft: false
          prerelease: false

      - name: Success notification
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          echo "✅ Successfully published crag@${{ steps.package-info.outputs.version }}"
          echo "📦 NPM: https://www.npmjs.com/package/crag"
          echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.package-info.outputs.version }}"
          echo ""
          echo "Users can now install with:"
          echo "npm install -g crag@${{ steps.package-info.outputs.version }}"
